#include <cstring>
#include <cstdio>
#include <deque>
#include <tuple>

#define MAX 100

using namespace std;

int n, m;

int map[MAX + 1][MAX + 1];
int check[MAX + 1][MAX + 1];
deque<pair<int,int>> d;

int dx[] = { -1,1,0,0, };
int dy[] = { 0,0,-1,1 };

int main(void) {
	scanf("%d %d", &m, &n);	//가로 세로
	memset(check, -1, sizeof(check));
	for (int i = 0; i < n; i++) {	//세로
		for (int j = 0; j < m; j++) {	//가로
			scanf("%1d", &map[i][j]);//[n][m]
		}
	}
	d.push_back(make_pair(0, 0));
	check[0][0] = 0;

	//벽을 부수는거 앞 그냥 뒤
	while (!d.empty()) {
		pair<int, int> now = d.front();
		d.pop_front();
		if (now.first == n - 1 && now.second == m - 1) {
			printf("%d", check[now.first][now.second]);
			break;
		}

		for (int i = 0; i < 4; i++) {
			int nx = now.first + dx[i];
			int ny = now.second + dy[i];
			if (nx >= 0 && nx < n&&ny >= 0 && ny < m) {
				if (check[nx][ny] == -1) {
					if (map[nx][ny] == 0) {	//벽이 없거나 가중치 0
						d.push_front(make_pair(nx, ny));
						check[nx][ny] = check[now.first][now.second];
					}
					else {	//벽이 있거나	가중치 1
						d.push_back(make_pair(nx, ny));
						check[nx][ny] = check[now.first][now.second] + 1;
					}

				}
			}
		}
	}
	return 0;
}
