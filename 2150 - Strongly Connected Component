#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>

#define MAX 200000

using namespace std;

int id, d[MAX];
bool finished[MAX];
vector<int> tree[MAX];
vector<vector<int> > SCC;
stack<int> s;


int dfs(int x) {  //타잔 알고리즘
	d[x] = ++id;	//노드마다 고유한 번호를 할당
	s.push(x);	//스택에 자기 자신을 삽입

	int parent = d[x];	//부모가 현재라고 봄 처음은
	for (int i = 0; i < tree[x].size(); i++) {
		int y = tree[x][i];	//각 자식 탐색
		if (d[y] == 0) parent = min(parent, dfs(y));	//d[y]가 0이라는 소리는 한번도 방분을 안했다는 이야기. dfs로 맨 끝까지 탐색
		else if (!finished[y]) parent = min(parent, d[y]);	//scc가 아닌 경우. 노드들중에 가장 작은 친구가 부모임
	}
	if (parent == d[x]) {
		vector<int> scc;	//scc 부분 트리
		while (true) {
			int t = s.top();
			s.pop();
			scc.push_back(t);
			finished[t] = true;	//이제 빼낸 노드들은 gcc의 가족!
			if (t == x) {
				break;
			}
		}
		sort(scc.begin(), scc.end());
		SCC.push_back(scc);
	}
	return parent;
}

int main(void) {
	int k, n;
	cin >> k >> n;
	
	for (int i = 1; i <= n; i++) {
		int a, b;
		cin >> a >> b;
		tree[a].push_back(b);
	}

	for (int i = 1; i <= k; i++) {
		if (d[i] == 0) dfs(i);
	}
	sort(SCC.begin(), SCC.end());
	printf("%d\n", SCC.size());
	for (int i = 0; i < SCC.size(); i++) {
		for (int j = 0; j < SCC[i].size(); j++) {
			printf("%d ", SCC[i][j]);
		}
		printf("-1\n");
	}
	return 0;
}
