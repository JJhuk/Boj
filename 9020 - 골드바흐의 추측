#include <iostream>
#include <vector>
#include <tuple>
#include <algorithm>
#include <math.h>

using namespace std;

vector<int> v;
vector<pair<int, int>> save;
bool check[100000];

bool cnt(pair<int,int> &p1, pair<int, int> &p2) {
	if (abs(p1.second - p1.first) < abs(p2.second- p2.first) )
		return true;
	else if (abs(p1.second - p1.first) == abs(p2.second - p2.first)) {
		if (p1.first < p2.first)
			return true;
		return false;
	}
	return false;
}

void eratos(long long n) {
	for (long long i = 2; i <= n; i++) {
		if (check[i] == false) {
			v.push_back(i);
			for (long long j = i * 2; j <= n; j += i) {
				check[j] = true;
			}
		}
	}
}

int main(void) {
	ios::sync_with_stdio(false);
	eratos(10000);
	int test_case;
	cin >> test_case;
	for (int i = 0; i < test_case; i++) {
		save.clear();
		int n,temp;
		cin >> n;
		for (int j = 0; j < v.size(); j++) {
			temp = n - v[j];
			if (binary_search(v.begin(), v.end(), temp)) {
				save.push_back(make_pair(v[j], temp));
			}
		}
		sort(save.begin(), save.end(), cnt);
		cout << save[0].first << " " << save[0].second<<"\n";
	}

	return 0;
}
