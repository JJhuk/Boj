#include <iostream>
#include <queue>
#include <utility>
#include <cstdio>
#include <algorithm>

using namespace std;

int map[27][27];	//행 열
int check[27][27];

int dx[4] = { 1,-1,0,0 };	
int dy[4] = { 0,0,1,-1 };

int bunji_count[625] = { 0 };

int map_size;
int bunji = 0;

//x y 번지
void bfs(int x, int y, int cnt) {
	queue<pair<int, int>> q;
	check[x][y] = cnt;
	q.push(make_pair(x, y));
	while (!q.empty()) {
		x = q.front().first;
		y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < map_size && 0 <= ny && ny < map_size) {
				if (map[nx][ny] == 1 && check[nx][ny] == 0) {
					q.push(make_pair(nx, ny));
					check[nx][ny] = cnt;
				}
			}
		}
	}
}	

int main(void) {
	cin.tie(0);
	cin >> map_size;

	for (int i = 0; i < map_size; i++) {
		for (int j = 0; j < map_size; j++) {
			scanf("%1d", &map[i][j]);
		}
	}

	for (int i = 0; i < map_size; i++) {
		for (int j = 0; j < map_size; j++) {
			if(map[i][j] == 1 && check[i][j] == 0) 
				bfs(i, j, ++bunji);
		}
	}

	for (int i = 0; i < map_size; i++) {
		for (int j = 0; j < map_size; j++) {
				bunji_count[check[i][j]]++;
		}
	}

	sort(bunji_count+1, bunji_count+bunji+1);
	printf("%d\n", bunji);
	for (int i = 1; i <= bunji; i++) {
			printf("%d\n", bunji_count[i]);
	}
	system("pause");
	return 0;
}
