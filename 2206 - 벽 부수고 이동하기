#include <cstring>
#include <cstdio>
#include <queue>
#include <tuple>

#define MAX 1000

using namespace std;

int n, m;	//세로 가로

int map[MAX + 1][MAX + 1];
int check[MAX + 1][MAX + 1][2];
queue<tuple<int, int, int>> q;	//x y 벽을 부순 횟수

int dx[] = { -1,1,0,0 };
int dy[] = { 0,0,-1,1 };

int main(void) {
	scanf("%d %d", &n, &m);	//세로 //가로
	memset(check, -1, sizeof(check));
	for (int i = 0; i < n; i++) {	//세로
		for (int j = 0; j < m; j++) {	//가로
			scanf("%1d", &map[i][j]);//[n][m]
		}
	}
	q.push(make_tuple(0, 0, 0));
	check[0][0][0] = 1;

	//벽을 부수는거 앞 그냥 뒤
	while (!q.empty()) {
		int x, y, z;
		tie(x, y, z) = q.front();
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= 0 && nx < n&&ny >= 0 && ny < m) {
				if (map[nx][ny] == 0 && check[nx][ny][z] == -1) {	//벽이 없을떄
					q.push(make_tuple(nx, ny, z));
					check[nx][ny][z] = check[x][y][z] + 1;
				}
				if (z == 0 && map[nx][ny] == 1 && check[nx][ny][z+1] == -1) {
					q.push(make_tuple(nx, ny, z + 1));
					check[nx][ny][z + 1] = check[x][y][z] + 1;
				}
			}
		}
	}
	if (check[n - 1][m - 1][0] == -1&& check[n-1][m-1][1]==-1) {
		printf("-1");
	}
	else {
		if (check[n - 1][m - 1][0] == -1)
			printf("%d", check[n - 1][m - 1][1]);
		else if (check[n - 1][m - 1][1] == -1)
			printf("%d", check[n - 1][m - 1][0]);
		else {
			if (check[n - 1][m - 1][0] > check[n - 1][m - 1][1]) {
				printf("%d", check[n - 1][m - 1][1]);
			}
			else
				printf("%d", check[n - 1][m - 1][0]);
		}
	}
	return 0;
}
