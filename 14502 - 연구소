#include <iostream>
#include <queue>
#include <tuple>
#include <cstring>
#include <vector>

#define MAX 8

using namespace std;

int map[MAX][MAX];
int temp_map[MAX][MAX];
bool check[MAX][MAX];
int wall_check[MAX][MAX];

int sero, garo, time;

int max_empty_space = 0;

queue<pair<int, int>> virus_q;
queue<pair<int, int>> temp_virus_q;
vector<pair<int, int>> empty_space;

int dx[] = { 1,-1,0,0 };
int dy[] = { 0,0,1,-1 };

//0은 빈칸,1은 벽,2는 바이러스

int check_empty_space() {
	int cnt_empty_space = 0;
	for (int i = 0; i < sero; i++) {
		for (int j = 0; j < garo; j++) {
			if (temp_map[i][j] == 0)
				cnt_empty_space++;
		}
	}
	return cnt_empty_space;
}

void bfs() {	//바이러스가 퍼져나가는것
	memcpy(temp_map, map, sizeof(temp_map));
	while (!temp_virus_q.empty()) {
		int x, y;
		tie(x, y) = temp_virus_q.front();
		temp_virus_q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];

			if (nx < 0 || nx >= sero || ny < 0 || ny >= garo)
				continue;
			if (temp_map[nx][ny] == 1)
				continue;
			if (check[nx][ny])
				continue;
			if (temp_map[nx][ny] != 0)
				continue;
			temp_map[nx][ny] = temp_map[x][y];
			check[nx][ny] = true;
			temp_virus_q.push(make_pair(nx, ny));
		}
	}

}

void dfs(int i1,int j1,int cnt) {

	if (cnt == 3) {	//벽이 3개 새워졌을때
		while (!temp_virus_q.empty()) {
			temp_virus_q.pop();
		}
		memset(check, false, sizeof(check));
		temp_virus_q = virus_q;
		bfs();	//바이러스를 돌아본다.
		int temp = check_empty_space();	//빈 공간 체크
		max_empty_space = max_empty_space < temp ? temp : max_empty_space;	//값 갱신
		return;
	}
	else {
		for (int i = 0; i < sero; i++) {
			for (int j = 0; j < garo; j++) {
				if (map[i][j] == 0) {
					map[i][j] = 1;
					dfs(i,j,cnt + 1);
					map[i][j] = 0;
				}
			}
		}
	}
}

int main(void) {
	ios::sync_with_stdio(false);
	cin.tie(0);
	memset(map, -1, sizeof(map));

	cin >> sero >> garo;
	for (int i = 0; i < sero; i++) {
		for (int j = 0; j < garo; j++) {
			cin >> map[i][j];
			if (map[i][j] == 2) {	//바이러스의 좌표 미리 큐에 넣어놈
				virus_q.push(make_pair(i, j));
			}
		}
	}
	dfs(0,0,0);

	cout << max_empty_space;

	system("pause");
	return 0;
}
