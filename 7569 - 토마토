#include <iostream>
#include <queue>
#include <string>
#define EMPTY 0
#define WALL -1
#define TOMATO 1
using namespace std;

int dx[] = { 1,-1,0,0,0,0 };
int dy[] = { 0,0,1,-1,0,0 };
int dz[] = { 0,0,0,0,1,-1 };

struct POS
{
	int z;
	int x;
	int y;
};

queue<POS> q;

int map[100][100][100];

int main(void)
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int m, n, h;
	cin >> m >> n >> h;

	for(int k=0;k<h;k++)
	{
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				cin >> map[k][i][j];
				if (map[k][i][j] == 1)
					q.push({ k,i,j });
			}
		}
	}
	

	
	while(!q.empty())
	{
		POS now = q.front();
		q.pop();
		for(int i=0;i<6;i++)
		{
			int nx = now.x + dx[i];
			int ny = now.y + dy[i];
			int nz = now.z + dz[i];
			if(nx>=0&&nx<n&&ny>=0&&ny<m&&nz>=0&&nz<h)
			{
				if(map[nz][nx][ny] == EMPTY)
				{
					map[nz][nx][ny] = map[now.z][now.x][now.y] + 1;
					q.push({ nz,nx,ny });
				}
			}
 		}
	}

	int ans = 0;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			for (int k = 0; k < h; k++)
			{
				if(map[k][i][j] == EMPTY)
				{
					cout << -1;
					return 0;
				}
				ans = ans < map[k][i][j] ? map[k][i][j] : ans;
			}
		}
	}

	cout << ans-1;
}

